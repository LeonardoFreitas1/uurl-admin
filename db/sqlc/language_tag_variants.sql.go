// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: language_tag_variants.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getPaginatedVariantsWithFilter = `-- name: GetPaginatedVariantsWithFilter :many
SELECT id, language_id, country_id, created_at, updated_at, variant_tag, description FROM variant
WHERE language_id = $3::integer
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetPaginatedVariantsWithFilterParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	LanguageID int32 `json:"language_id"`
}

func (q *Queries) GetPaginatedVariantsWithFilter(ctx context.Context, arg GetPaginatedVariantsWithFilterParams) ([]Variant, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedVariantsWithFilter, arg.Limit, arg.Offset, arg.LanguageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Variant{}
	for rows.Next() {
		var i Variant
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.CountryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VariantTag,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedVariantsWithoutFilter = `-- name: GetPaginatedVariantsWithoutFilter :many
SELECT id, language_id, country_id, created_at, updated_at, variant_tag, description FROM variant
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetPaginatedVariantsWithoutFilterParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedVariantsWithoutFilter(ctx context.Context, arg GetPaginatedVariantsWithoutFilterParams) ([]Variant, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedVariantsWithoutFilter, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Variant{}
	for rows.Next() {
		var i Variant
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.CountryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VariantTag,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantCount = `-- name: GetVariantCount :one
SELECT count(id) FROM variant WHERE language_id = $1
`

func (q *Queries) GetVariantCount(ctx context.Context, languageID sql.NullInt32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getVariantCount, languageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getVariantsByLanguageTagID = `-- name: GetVariantsByLanguageTagID :many
SELECT id, created_at, updated_at, variant_tag, description
FROM variant WHERE language_id = $1
`

type GetVariantsByLanguageTagIDRow struct {
	ID          int32          `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	VariantTag  string         `json:"variant_tag"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetVariantsByLanguageTagID(ctx context.Context, languageID sql.NullInt32) ([]GetVariantsByLanguageTagIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantsByLanguageTagID, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVariantsByLanguageTagIDRow{}
	for rows.Next() {
		var i GetVariantsByLanguageTagIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VariantTag,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVariant = `-- name: InsertVariant :exec
INSERT INTO variant (language_id, variant_tag, description, country_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertVariantParams struct {
	LanguageID  sql.NullInt32  `json:"language_id"`
	VariantTag  string         `json:"variant_tag"`
	Description sql.NullString `json:"description"`
	CountryID   sql.NullInt32  `json:"country_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) InsertVariant(ctx context.Context, arg InsertVariantParams) error {
	_, err := q.db.ExecContext(ctx, insertVariant,
		arg.LanguageID,
		arg.VariantTag,
		arg.Description,
		arg.CountryID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateVariant = `-- name: UpdateVariant :exec
UPDATE variant set language_id = $2, variant_tag = $3, description = $4, updated_at = $5 where id = $1
`

type UpdateVariantParams struct {
	ID          int32          `json:"id"`
	LanguageID  sql.NullInt32  `json:"language_id"`
	VariantTag  string         `json:"variant_tag"`
	Description sql.NullString `json:"description"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateVariant(ctx context.Context, arg UpdateVariantParams) error {
	_, err := q.db.ExecContext(ctx, updateVariant,
		arg.ID,
		arg.LanguageID,
		arg.VariantTag,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
