// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: language_tag_variants.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getVariantsByLanguageTagID = `-- name: GetVariantsByLanguageTagID :many
SELECT id, created_at, updated_at, variant_tag, description, is_iana_language_sub_tag, instances_on_domains_count
FROM language_tag_variants WHERE language_tag_id = $1
`

type GetVariantsByLanguageTagIDRow struct {
	ID                      int32          `json:"id"`
	CreatedAt               time.Time      `json:"created_at"`
	UpdatedAt               time.Time      `json:"updated_at"`
	VariantTag              string         `json:"variant_tag"`
	Description             sql.NullString `json:"description"`
	IsIanaLanguageSubTag    bool           `json:"is_iana_language_sub_tag"`
	InstancesOnDomainsCount int32          `json:"instances_on_domains_count"`
}

func (q *Queries) GetVariantsByLanguageTagID(ctx context.Context, languageTagID sql.NullInt32) ([]GetVariantsByLanguageTagIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantsByLanguageTagID, languageTagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVariantsByLanguageTagIDRow{}
	for rows.Next() {
		var i GetVariantsByLanguageTagIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VariantTag,
			&i.Description,
			&i.IsIanaLanguageSubTag,
			&i.InstancesOnDomainsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVariant = `-- name: InsertVariant :exec
INSERT INTO language_tag_variants (language_tag_id, variant_tag, description, is_iana_language_sub_tag, instances_on_domains_count, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertVariantParams struct {
	LanguageTagID           sql.NullInt32  `json:"language_tag_id"`
	VariantTag              string         `json:"variant_tag"`
	Description             sql.NullString `json:"description"`
	IsIanaLanguageSubTag    bool           `json:"is_iana_language_sub_tag"`
	InstancesOnDomainsCount int32          `json:"instances_on_domains_count"`
	CreatedAt               time.Time      `json:"created_at"`
	UpdatedAt               time.Time      `json:"updated_at"`
}

func (q *Queries) InsertVariant(ctx context.Context, arg InsertVariantParams) error {
	_, err := q.db.ExecContext(ctx, insertVariant,
		arg.LanguageTagID,
		arg.VariantTag,
		arg.Description,
		arg.IsIanaLanguageSubTag,
		arg.InstancesOnDomainsCount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
