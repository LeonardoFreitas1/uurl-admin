// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: language_tag.sql

package sqlc

import (
	"context"
)

const getAllLanguageTags = `-- name: GetAllLanguageTags :many
SELECT id, name, iso_639_1, iso_639_2 FROM language
`

func (q *Queries) GetAllLanguageTags(ctx context.Context) ([]Language, error) {
	rows, err := q.db.QueryContext(ctx, getAllLanguageTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Language{}
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Iso6391,
			&i.Iso6392,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguageTagByID = `-- name: GetLanguageTagByID :one
SELECT id, name, iso_639_1, iso_639_2 FROM language WHERE id = $1
`

func (q *Queries) GetLanguageTagByID(ctx context.Context, id int32) (Language, error) {
	row := q.db.QueryRowContext(ctx, getLanguageTagByID, id)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Iso6391,
		&i.Iso6392,
	)
	return i, err
}

const insertLanguageTag = `-- name: InsertLanguageTag :one
INSERT INTO language (name, iso_639_1, iso_639_2) VALUES ($1, $2, $3) RETURNING id
`

type InsertLanguageTagParams struct {
	Name    string `json:"name"`
	Iso6391 string `json:"iso_639_1"`
	Iso6392 string `json:"iso_639_2"`
}

func (q *Queries) InsertLanguageTag(ctx context.Context, arg InsertLanguageTagParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertLanguageTag, arg.Name, arg.Iso6391, arg.Iso6392)
	var id int32
	err := row.Scan(&id)
	return id, err
}
