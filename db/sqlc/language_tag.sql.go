// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: language_tag.sql

package sqlc

import (
	"context"
)

const getAllLanguageTags = `-- name: GetAllLanguageTags :many
SELECT id, name, iso_code_1, iso_code_2 FROM language_tags
`

func (q *Queries) GetAllLanguageTags(ctx context.Context) ([]LanguageTag, error) {
	rows, err := q.db.QueryContext(ctx, getAllLanguageTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LanguageTag{}
	for rows.Next() {
		var i LanguageTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsoCode1,
			&i.IsoCode2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguageTagByID = `-- name: GetLanguageTagByID :one
SELECT id, name, iso_code_1, iso_code_2 FROM language_tags WHERE id = $1
`

func (q *Queries) GetLanguageTagByID(ctx context.Context, id int32) (LanguageTag, error) {
	row := q.db.QueryRowContext(ctx, getLanguageTagByID, id)
	var i LanguageTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsoCode1,
		&i.IsoCode2,
	)
	return i, err
}

const insertLanguageTag = `-- name: InsertLanguageTag :one
INSERT INTO language_tags (name, iso_code_1, iso_code_2) VALUES ($1, $2, $3) RETURNING id
`

type InsertLanguageTagParams struct {
	Name     string `json:"name"`
	IsoCode1 string `json:"iso_code_1"`
	IsoCode2 string `json:"iso_code_2"`
}

func (q *Queries) InsertLanguageTag(ctx context.Context, arg InsertLanguageTagParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertLanguageTag, arg.Name, arg.IsoCode1, arg.IsoCode2)
	var id int32
	err := row.Scan(&id)
	return id, err
}
