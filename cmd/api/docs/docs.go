// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/language": {
            "get": {
                "description": "Retrieve all language tags with their associated variants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Get all language tags",
                "responses": {
                    "200": {
                        "description": "List of Language Tags with variants",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.LanguageTagGetAllResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get language tags",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert a new language tag and its associated variants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Create a new language tag",
                "parameters": [
                    {
                        "description": "Language Tag with Variants",
                        "name": "languageTag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Language Tag with variants",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to insert language tag or variants",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/language/{id}": {
            "get": {
                "description": "Retrieve a specific language tag and its variants by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Get language tag by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Language Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Language Tag with variants",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagResponse"
                        }
                    },
                    "404": {
                        "description": "Language tag not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get variants",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.LanguageTagBody": {
            "type": "object",
            "properties": {
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.LanguageTagGetAllResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "variants_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.LanguageTagResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "UURL Admin API",
	Description:      "API documentation for UURL Admin service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
