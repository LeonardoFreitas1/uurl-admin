// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/language": {
            "get": {
                "description": "Retrieve all language tags with their associated variants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Get all language tags",
                "responses": {
                    "200": {
                        "description": "List of Language Tags with variants",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.LanguageTagGetAllResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get language tags",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert a new language tag and its associated variants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Create a new language tag",
                "parameters": [
                    {
                        "description": "Language Tag with Variants",
                        "name": "languageTag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Language Tag with variants",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to insert language tag or variants",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/language-variant": {
            "get": {
                "description": "Get a list of language tag variants with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "language-variant"
                ],
                "summary": "Get paginated language tag variants",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Language Tag ID",
                        "name": "languageTagId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedVariantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid languageTagId or page_token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database query error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new language tag variant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "language-variant"
                ],
                "summary": "Create a new language tag variant",
                "parameters": [
                    {
                        "description": "Language Tag Variant",
                        "name": "variant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagVariantsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagVariantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database query error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/language-variant/{id}": {
            "put": {
                "description": "Update an existing language tag variant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "language-variant"
                ],
                "summary": "Update an existing language tag variant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Variant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Language Tag Variant",
                        "name": "variant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagVariantsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagVariantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Variant not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database query error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/language/{id}": {
            "get": {
                "description": "Retrieve a specific language tag and its variants by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LanguageTags"
                ],
                "summary": "Get language tag by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Language Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Language Tag with variants",
                        "schema": {
                            "$ref": "#/definitions/handlers.LanguageTagResponse"
                        }
                    },
                    "404": {
                        "description": "Language tag not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get variants",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.LanguageTagBody": {
            "type": "object",
            "properties": {
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.LanguageTagGetAllResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "variants_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.LanguageTagResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "iso_code_1": {
                    "type": "string"
                },
                "iso_code_2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.LanguageTagVariantsRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "is_iana_language_sub_tag": {
                    "type": "boolean"
                },
                "language_tag_id": {
                    "type": "integer"
                },
                "variant_tag": {
                    "type": "string"
                }
            }
        },
        "handlers.LanguageTagVariantsResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_iana_language_sub_tag": {
                    "type": "boolean"
                },
                "language_tag_id": {
                    "type": "integer"
                },
                "variant_tag": {
                    "type": "string"
                }
            }
        },
        "handlers.PaginatedVariantsResponse": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "variants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LanguageTagVariantsResponse"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "UURL Admin API",
	Description:      "API documentation for UURL Admin service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
